-- ✅ Users Table

CREATE TABLE users (

    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    phone_number VARCHAR2(10) UNIQUE NOT NULL CHECK(REGEXP_LIKE(phone_number, '^\d{10}$')),
    role VARCHAR2(50) CHECK(role IN ('Requester', 'Driver', 'MaintenanceHead')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ✅ Rides Table (Tracks ride bookings & status)
CREATE TABLE rides (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(id) ON DELETE CASCADE,
    from_location VARCHAR2(255) NOT NULL,
    to_location VARCHAR2(255) NOT NULL,
    vehicle_type VARCHAR2(50) NOT NULL,
    status VARCHAR2(50) DEFAULT 'pending' CHECK(status IN ('pending', 'in-progress', 'completed')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ✅ Forklifts Table (Links vehicles to drivers)
CREATE TABLE forklifts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vehicle_number NUMBER(2) UNIQUE NOT NULL CHECK(vehicle_number BETWEEN 10 AND 99), -- Ensures 2-digit values
    driver_id NUMBER REFERENCES users(id) ON DELETE SET NULL,
    status VARCHAR2(50) DEFAULT 'active' CHECK(status IN ('active', 'maintenance')),
    last_maintenance_date DATE
);

-- ✅ Maintenance Requests Table (Tracks reported issues)
CREATE TABLE maintenance_requests (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    forklift_id NUMBER REFERENCES forklifts(id) ON DELETE CASCADE,
    issue VARCHAR2(255) NOT NULL,
    status VARCHAR2(50) DEFAULT 'pending' CHECK(status IN ('pending', 'resolved')),
    reported_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE requests (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(id) ON DELETE CASCADE,
    vehicle_number NUMBER(2) NOT NULL CHECK(REGEXP_LIKE(vehicle_number, '^\d{2}$')),
    name VARCHAR2(255) NOT NULL,
    mobile_number VARCHAR2(10) NOT NULL CHECK(REGEXP_LIKE(mobile_number, '^\d{10}$')),
    role VARCHAR2(50) CHECK(role IN ('Driver', 'User', 'Admin')),
    status CHAR(1) DEFAULT 'N' CHECK(status IN ('Y', 'N')),
    forklifts_allocated NUMBER DEFAULT 0,
    request_comment VARCHAR2(255) CHECK(REGEXP_LIKE(request_comment, '^[a-zA-Z0-9 ]*$')), -- Renamed column
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- ✅ Reports Table (Tracks ride activities for maintenance)
CREATE TABLE reports (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    forklift_id NUMBER REFERENCES forklifts(id) ON DELETE SET NULL,
    start_time TIMESTAMP,
    material_pick_time TIMESTAMP,
    end_ride_time TIMESTAMP,
    gap_pick_to_drop INTERVAL DAY TO SECOND,
    gap_pick_to_start INTERVAL DAY TO SECOND,
    last_maintenance_date DATE
);




DESC rides;


SELECT * FROM requests;

COMMIT;

SELECT * FROM rides ORDER BY created_at DESC    

SELECT * FROM rides WHERE STATUS = 'pending' AND DRIVER_ID IS NULL;


SELECT * FROM requests;

SELECT * FROM forklifts;

DESC reports;

SELECT * FROM users WHERE role = 'Driver';


SELECT * FROM requests WHERE user_id IN (SELECT id FROM users WHERE role = 'Driver');


SELECT * FROM forklifts WHERE driver_id IS NOT NULL;

SELECT * FROM rides;

SELECT id, status 
FROM rides 
WHERE id = 170; 

SELECT id, status FROM rides WHERE id = :RideId;

SELECT DISTINCT id FROM rides;

ALTER TABLE rides DROP COLUMN completed_at;


SELECT r.id, r.from_location, r.to_location, r.status, 
       r.created_at, r.end_time as completed_at,
       u.name as driver_name
FROM rides r
JOIN users u ON r.user_id = u.id
WHERE r.status = 'completed'
AND u.id = :driverId
ORDER BY r.end_time DESC;


-- Modify the rides table
ALTER TABLE rides ADD (
    ride_type VARCHAR2(20) DEFAULT 'Regular' CHECK (ride_type IN ('Regular', 'Special Task')),
    driver_id NUMBER REFERENCES users(id) ON DELETE SET NULL
);

DESCRIBE rides;

-- Check if column exists
SELECT column_name, data_type, nullable 
FROM user_tab_columns 
WHERE table_name = 'RIDES' AND column_name = 'RIDE_TYPE';

-- Check sample data
SELECT id, from_location, to_location, ride_type 
FROM rides 
ORDER BY created_at DESC 
FETCH FIRST 5 ROWS ONLY;
