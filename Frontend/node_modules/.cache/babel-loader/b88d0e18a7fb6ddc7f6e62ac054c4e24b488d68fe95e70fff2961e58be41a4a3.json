{"ast":null,"code":"import express from \"express\";\nimport { executeQuery } from \"./dbConfig.js\";\nconst router = express.Router();\nexport default function driverRoutes(io) {\n  // ✅ Mark Driver as HOME\n  router.post(\"/mark-home\", async (req, res) => {\n    try {\n      const {\n        driverId\n      } = req.body;\n      if (!driverId) {\n        return res.status(400).json({\n          error: \"Driver ID is required\"\n        });\n      }\n      const result = await executeQuery(\"UPDATE drivers SET status = 'HOME' WHERE driver_id = :driverId\", {\n        driverId\n      });\n      if (result.rowsAffected === 0) {\n        return res.status(404).json({\n          error: \"Driver not found or already HOME.\"\n        });\n      }\n\n      // 🔹 Notify frontend about driver status change\n      io.emit(\"driverStatusUpdated\", {\n        driverId,\n        status: \"HOME\"\n      });\n      res.status(200).json({\n        message: \"Driver marked as HOME.\"\n      });\n    } catch (error) {\n      console.error(\"❌ Error marking driver as HOME:\", error);\n      res.status(500).json({\n        error: \"Failed to update driver status.\"\n      });\n    }\n  });\n\n  // ✅ Get Available Rides\n  router.get(\"/available-rides\", async (req, res) => {\n    try {\n      const query = `\n        SELECT id, from_location, to_location, vehicle_type, ride_type, status\n        FROM rides\n        WHERE status = 'pending'\n        ORDER BY created_at DESC\n      `;\n      const rides = await executeQuery(query);\n      res.status(200).json({\n        rides\n      });\n    } catch (error) {\n      console.error(\"❌ Error fetching available rides:\", error);\n      res.status(500).json({\n        error: \"Failed to fetch rides\"\n      });\n    }\n  });\n\n  // ✅ Listen for new ride requests in WebSocket\n  io.on(\"connection\", socket => {\n    socket.on(\"newRideRequest\", rideData => {\n      io.to(\"drivers\").emit(\"newRideRequest\", rideData);\n    });\n  });\n  return router;\n}","map":{"version":3,"names":["express","executeQuery","router","Router","driverRoutes","io","post","req","res","driverId","body","status","json","error","result","rowsAffected","emit","message","console","get","query","rides","on","socket","rideData","to"],"sources":["C:/Users/ksrvisitor/forklift/Frontend/src/Components/DriverDashboard.js"],"sourcesContent":["import express from \"express\";\r\nimport { executeQuery } from \"./dbConfig.js\";\r\n\r\nconst router = express.Router();\r\n\r\nexport default function driverRoutes(io) {\r\n  // ✅ Mark Driver as HOME\r\n  router.post(\"/mark-home\", async (req, res) => {\r\n    try {\r\n      const { driverId } = req.body;\r\n\r\n      if (!driverId) {\r\n        return res.status(400).json({ error: \"Driver ID is required\" });\r\n      }\r\n\r\n      const result = await executeQuery(\r\n        \"UPDATE drivers SET status = 'HOME' WHERE driver_id = :driverId\",\r\n        { driverId }\r\n      );\r\n\r\n      if (result.rowsAffected === 0) {\r\n        return res\r\n          .status(404)\r\n          .json({ error: \"Driver not found or already HOME.\" });\r\n      }\r\n\r\n      // 🔹 Notify frontend about driver status change\r\n      io.emit(\"driverStatusUpdated\", { driverId, status: \"HOME\" });\r\n\r\n      res.status(200).json({ message: \"Driver marked as HOME.\" });\r\n    } catch (error) {\r\n      console.error(\"❌ Error marking driver as HOME:\", error);\r\n      res.status(500).json({ error: \"Failed to update driver status.\" });\r\n    }\r\n  });\r\n\r\n  // ✅ Get Available Rides\r\n  router.get(\"/available-rides\", async (req, res) => {\r\n    try {\r\n      const query = `\r\n        SELECT id, from_location, to_location, vehicle_type, ride_type, status\r\n        FROM rides\r\n        WHERE status = 'pending'\r\n        ORDER BY created_at DESC\r\n      `;\r\n\r\n      const rides = await executeQuery(query);\r\n      res.status(200).json({ rides });\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching available rides:\", error);\r\n      res.status(500).json({ error: \"Failed to fetch rides\" });\r\n    }\r\n  });\r\n\r\n  // ✅ Listen for new ride requests in WebSocket\r\n  io.on(\"connection\", (socket) => {\r\n    socket.on(\"newRideRequest\", (rideData) => {\r\n      io.to(\"drivers\").emit(\"newRideRequest\", rideData);\r\n    });\r\n  });\r\n\r\n  return router;\r\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,SAASC,YAAY,QAAQ,eAAe;AAE5C,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAE/B,eAAe,SAASC,YAAYA,CAACC,EAAE,EAAE;EACvC;EACAH,MAAM,CAACI,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;IAC5C,IAAI;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGF,GAAG,CAACG,IAAI;MAE7B,IAAI,CAACD,QAAQ,EAAE;QACb,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAwB,CAAC,CAAC;MACjE;MAEA,MAAMC,MAAM,GAAG,MAAMb,YAAY,CAC/B,gEAAgE,EAChE;QAAEQ;MAAS,CACb,CAAC;MAED,IAAIK,MAAM,CAACC,YAAY,KAAK,CAAC,EAAE;QAC7B,OAAOP,GAAG,CACPG,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAoC,CAAC,CAAC;MACzD;;MAEA;MACAR,EAAE,CAACW,IAAI,CAAC,qBAAqB,EAAE;QAAEP,QAAQ;QAAEE,MAAM,EAAE;MAAO,CAAC,CAAC;MAE5DH,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEK,OAAO,EAAE;MAAyB,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDL,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAkC,CAAC,CAAC;IACpE;EACF,CAAC,CAAC;;EAEF;EACAX,MAAM,CAACiB,GAAG,CAAC,kBAAkB,EAAE,OAAOZ,GAAG,EAAEC,GAAG,KAAK;IACjD,IAAI;MACF,MAAMY,KAAK,GAAG;AACpB;AACA;AACA;AACA;AACA,OAAO;MAED,MAAMC,KAAK,GAAG,MAAMpB,YAAY,CAACmB,KAAK,CAAC;MACvCZ,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAES;MAAM,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDL,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAwB,CAAC,CAAC;IAC1D;EACF,CAAC,CAAC;;EAEF;EACAR,EAAE,CAACiB,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;IAC9BA,MAAM,CAACD,EAAE,CAAC,gBAAgB,EAAGE,QAAQ,IAAK;MACxCnB,EAAE,CAACoB,EAAE,CAAC,SAAS,CAAC,CAACT,IAAI,CAAC,gBAAgB,EAAEQ,QAAQ,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOtB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}