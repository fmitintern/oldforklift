{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksrvisitor\\\\forklift-tracking\\\\Frontend\\\\src\\\\Components\\\\DriverDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport \"./DriverDashboard.css\";\nimport { acceptRide, completeRide } from \"../Services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:5000\";\nconst DriverDashboard = ({\n  driver\n}) => {\n  _s();\n  const [ongoingRide, setOngoingRide] = useState(null);\n  const [newRideRequests, setNewRideRequests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [showEndRideConfirmation, setShowEndRideConfirmation] = useState(false);\n  const [rideEndedMessage, setRideEndedMessage] = useState(\"\");\n  const [rideAcceptedMessage, setRideAcceptedMessage] = useState(\"\");\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Initialize Socket.IO connection\n  useEffect(() => {\n    const newSocket = io(SOCKET_URL, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    newSocket.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n    newSocket.on('connect_error', err => {\n      console.error('Socket connection error:', err);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.off('connect');\n      newSocket.off('disconnect');\n      newSocket.off('connect_error');\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Listen for new ride requests\n  useEffect(() => {\n    if (!socket) return;\n    const handleNewRideRequest = () => {\n      fetchNewRideRequests();\n    };\n    socket.on('rideRequested', handleNewRideRequest);\n    return () => {\n      socket.off('rideRequested', handleNewRideRequest);\n    };\n  }, [socket]);\n\n  // Fetch new ride requests\n  const fetchNewRideRequests = async () => {\n    try {\n      const response = await fetch(`${SOCKET_URL}/api/drivers/available-rides`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch driver data\");\n      }\n      const data = await response.json();\n      const rides = data.rides.rows || [];\n      setNewRideRequests(rides);\n    } catch (error) {\n      console.error(\"❌ Error fetching driver data:\", error);\n    }\n  };\n\n  // Handle accepting a ride\n  const handleAcceptRide = async rideId => {\n    if (loading) return;\n    setLoading(true);\n    try {\n      const response = await acceptRide(driver.id, rideId);\n      setRideAcceptedMessage(\"✅ Ride accepted successfully!\");\n      const acceptedRide = newRideRequests.find(ride => ride.ID === rideId);\n      setOngoingRide(acceptedRide);\n      setNewRideRequests(prev => prev.filter(ride => ride.ID !== rideId));\n      if (socket) {\n        socket.emit(\"rideAccepted\", {\n          rideId,\n          driverId: driver.id\n        });\n      }\n    } catch (error) {\n      setRideAcceptedMessage(\"❌ Failed to accept ride.\");\n      console.error(\"❌ Error accepting ride:\", error);\n    }\n    setLoading(false);\n  };\n\n  // Handle ending a ride\n  const handleEndRide = async () => {\n    if (!ongoingRide || !socket) return;\n    try {\n      const response = await completeRide(ongoingRide.ID);\n      setRideEndedMessage(\"✅ Ride ended successfully!\");\n      socket.emit(\"rideEnded\", {\n        rideId: ongoingRide.ID,\n        driverId: driver.id\n      });\n      setTimeout(() => {\n        setOngoingRide(null);\n        setProgress(0);\n        setRideEndedMessage(\"\");\n        fetchNewRideRequests();\n      }, 2000);\n    } catch (error) {\n      setRideEndedMessage(\"❌ Failed to end ride.\");\n      console.error(\"❌ Error ending ride:\", error);\n    }\n  };\n\n  // Rest of your component remains the same...\n  // [Keep all your existing JSX and other useEffect hooks]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"driver-dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `connection-status ${isConnected ? 'connected' : 'disconnected'}`,\n      children: isConnected ? '🟢 Connected' : '🔴 Disconnected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(DriverDashboard, \"Jd5RhqrP8a8Yxn5CT39iSzRFd3U=\");\n_c = DriverDashboard;\nexport default DriverDashboard;\nvar _c;\n$RefreshReg$(_c, \"DriverDashboard\");","map":{"version":3,"names":["React","useState","useEffect","io","acceptRide","completeRide","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","DriverDashboard","driver","_s","ongoingRide","setOngoingRide","newRideRequests","setNewRideRequests","loading","setLoading","progress","setProgress","showEndRideConfirmation","setShowEndRideConfirmation","rideEndedMessage","setRideEndedMessage","rideAcceptedMessage","setRideAcceptedMessage","socket","setSocket","isConnected","setIsConnected","newSocket","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","err","error","off","disconnect","handleNewRideRequest","fetchNewRideRequests","response","fetch","ok","Error","data","json","rides","rows","handleAcceptRide","rideId","id","acceptedRide","find","ride","ID","prev","filter","emit","driverId","handleEndRide","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ksrvisitor/forklift-tracking/Frontend/src/Components/DriverDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport \"./DriverDashboard.css\";\r\nimport { acceptRide, completeRide } from \"../Services/api\";\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:5000\";\r\n\r\nconst DriverDashboard = ({ driver }) => {\r\n  const [ongoingRide, setOngoingRide] = useState(null);\r\n  const [newRideRequests, setNewRideRequests] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [showEndRideConfirmation, setShowEndRideConfirmation] = useState(false);\r\n  const [rideEndedMessage, setRideEndedMessage] = useState(\"\");\r\n  const [rideAcceptedMessage, setRideAcceptedMessage] = useState(\"\");\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  // Initialize Socket.IO connection\r\n  useEffect(() => {\r\n    const newSocket = io(SOCKET_URL, {\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Socket connected');\r\n      setIsConnected(true);\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('connect_error', (err) => {\r\n      console.error('Socket connection error:', err);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.off('connect');\r\n      newSocket.off('disconnect');\r\n      newSocket.off('connect_error');\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Listen for new ride requests\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const handleNewRideRequest = () => {\r\n      fetchNewRideRequests();\r\n    };\r\n\r\n    socket.on('rideRequested', handleNewRideRequest);\r\n\r\n    return () => {\r\n      socket.off('rideRequested', handleNewRideRequest);\r\n    };\r\n  }, [socket]);\r\n\r\n  // Fetch new ride requests\r\n  const fetchNewRideRequests = async () => {\r\n    try {\r\n      const response = await fetch(`${SOCKET_URL}/api/drivers/available-rides`);\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch driver data\");\r\n      }\r\n      const data = await response.json();\r\n      const rides = data.rides.rows || [];\r\n      setNewRideRequests(rides);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching driver data:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle accepting a ride\r\n  const handleAcceptRide = async (rideId) => {\r\n    if (loading) return;\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await acceptRide(driver.id, rideId);\r\n      setRideAcceptedMessage(\"✅ Ride accepted successfully!\");\r\n      \r\n      const acceptedRide = newRideRequests.find((ride) => ride.ID === rideId);\r\n      setOngoingRide(acceptedRide);\r\n      setNewRideRequests((prev) => prev.filter((ride) => ride.ID !== rideId));\r\n      \r\n      if (socket) {\r\n        socket.emit(\"rideAccepted\", { \r\n          rideId,\r\n          driverId: driver.id \r\n        });\r\n      }\r\n    } catch (error) {\r\n      setRideAcceptedMessage(\"❌ Failed to accept ride.\");\r\n      console.error(\"❌ Error accepting ride:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Handle ending a ride\r\n  const handleEndRide = async () => {\r\n    if (!ongoingRide || !socket) return;\r\n  \r\n    try {\r\n      const response = await completeRide(ongoingRide.ID);\r\n      setRideEndedMessage(\"✅ Ride ended successfully!\");\r\n  \r\n      socket.emit(\"rideEnded\", { \r\n        rideId: ongoingRide.ID,\r\n        driverId: driver.id \r\n      });\r\n  \r\n      setTimeout(() => {\r\n        setOngoingRide(null);\r\n        setProgress(0);\r\n        setRideEndedMessage(\"\");\r\n        fetchNewRideRequests();\r\n      }, 2000);\r\n    } catch (error) {\r\n      setRideEndedMessage(\"❌ Failed to end ride.\");\r\n      console.error(\"❌ Error ending ride:\", error);\r\n    }\r\n  };\r\n\r\n  // Rest of your component remains the same...\r\n  // [Keep all your existing JSX and other useEffect hooks]\r\n\r\n  return (\r\n    <div className=\"driver-dashboard\">\r\n      {/* Connection status indicator */}\r\n      <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>\r\n        {isConnected ? '🟢 Connected' : '🔴 Disconnected'}\r\n      </div>\r\n      \r\n      {/* Rest of your existing JSX */}\r\n      {/* ... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}