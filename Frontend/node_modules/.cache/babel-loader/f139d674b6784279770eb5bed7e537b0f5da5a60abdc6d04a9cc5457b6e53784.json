{"ast":null,"code":"import axios from \"axios\";\nimport { io } from \"socket.io-client\";\nconst BASE_URL = \"http://144.11.1.83:5000/api\";\nconst SOCKET_URL = \"http://144.11.1.83:5000\";\n\n// ✅ Initialize WebSocket Connection\nconst socket = io(SOCKET_URL, {\n  reconnectionAttempts: 5,\n  // Auto-reconnect up to 5 times\n  timeout: 5000 // 5 seconds timeout\n});\n\n// ✅ Helper Function for API Requests\nconst apiRequest = async (method, endpoint, data = null) => {\n  try {\n    const response = await axios({\n      method,\n      url: `${BASE_URL}${endpoint}`,\n      data\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(`❌ API Error [${method.toUpperCase()} ${endpoint}]:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    return {\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || \"Request failed\"\n    };\n  }\n};\n\n// ✅ Fetch Active Ride\nexport const fetchActiveRide = userId => apiRequest(\"get\", `/tracking/ride-status/${userId}`);\n\n// ✅ Book a Ride & Notify Drivers\nexport const bookRide = async (userId, fromLocation, toLocation, vehicleType, rideType) => {\n  if (!userId || isNaN(userId)) return {\n    error: \"Invalid User ID\"\n  };\n  const response = await apiRequest(\"post\", \"/bookings/book-ride\", {\n    userId,\n    fromLocation,\n    toLocation,\n    vehicleType\n  });\n  if (response !== null && response !== void 0 && response.rideId) socket.emit(\"newRideRequest\", response);\n  return response;\n};\n\n// ✅ Accept a Ride & Notify Requester\nexport const acceptRide = async (driverId, rideId) => {\n  if (!driverId || !rideId) return {\n    error: \"Invalid parameters\"\n  };\n  const response = await apiRequest(\"post\", \"/tracking/accept-ride\", {\n    driverId,\n    rideId\n  });\n  if (response.success) socket.emit(\"acceptRide\", {\n    driverId,\n    rideId\n  });\n  return response;\n};\n\n// ✅ Start a Ride\nexport const startRide = rideId => apiRequest(\"post\", \"/tracking/start-ride\", {\n  rideId\n});\n\n// ✅ Mark Material Pick Time\nexport const markPickTime = rideId => apiRequest(\"post\", \"/tracking/mark-pick-time\", {\n  rideId\n});\n\n// ✅ Complete a Ride\nexport const completeRide = async rideId => {\n  try {\n    const response = await apiRequest(\"post\", \"/tracking/complete-ride\", {\n      rideId\n    });\n    if (response.success) {\n      socket.emit(\"rideCompleted\", {\n        rideId,\n        driverId: response.driverId || \"unknown\"\n      });\n    }\n    return response;\n  } catch (error) {\n    console.error(\"Error completing ride:\", error);\n    return {\n      error: \"Failed to complete ride\"\n    };\n  }\n};\n\n// ✅ Fetch Maintenance Requests\nexport const fetchMaintenanceRequests = () => apiRequest(\"get\", \"/maintenance/issues\");\n\n// ✅ Report Maintenance Issue\nexport const reportMaintenance = (forkliftId, issue) => apiRequest(\"post\", \"/maintenance/report-maintenance\", {\n  forkliftId,\n  issue\n});\n\n// ✅ Resolve Maintenance Issue\nexport const resolveMaintenance = requestId => apiRequest(\"post\", \"/maintenance/resolve-maintenance\", {\n  requestId\n});\n\n// ✅ Fetch Ride Reports\nexport const fetchRideReports = () => apiRequest(\"get\", \"/reports/rides\");\n\n// ✅ Mark Driver as HOME\nexport const markHome = driverId => apiRequest(\"post\", \"/drivers/mark-home\", {\n  driverId\n});\n\n// ✅ WebSocket Event Listeners\nsocket.on(\"newRideRequest\", rideData => console.log(\"📌 New ride request:\", rideData));\nsocket.on(\"rideAccepted\", ({\n  rideId,\n  driverId\n}) => console.log(`✅ Ride ${rideId} accepted by Driver ${driverId}`));\nsocket.on(\"driverStatusUpdated\", ({\n  driverId,\n  status\n}) => console.log(`🔄 Driver ${driverId} is now ${status}`));","map":{"version":3,"names":["axios","io","BASE_URL","SOCKET_URL","socket","reconnectionAttempts","timeout","apiRequest","method","endpoint","data","response","url","error","_error$response","_error$response2","console","toUpperCase","fetchActiveRide","userId","bookRide","fromLocation","toLocation","vehicleType","rideType","isNaN","rideId","emit","acceptRide","driverId","success","startRide","markPickTime","completeRide","fetchMaintenanceRequests","reportMaintenance","forkliftId","issue","resolveMaintenance","requestId","fetchRideReports","markHome","on","rideData","log","status"],"sources":["C:/Users/ksrvisitor/forklift-tracking/Frontend/src/Services/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst BASE_URL = \"http://144.11.1.83:5000/api\";\r\nconst SOCKET_URL = \"http://144.11.1.83:5000\";\r\n\r\n// ✅ Initialize WebSocket Connection\r\nconst socket = io(SOCKET_URL, {\r\n  reconnectionAttempts: 5, // Auto-reconnect up to 5 times\r\n  timeout: 5000, // 5 seconds timeout\r\n});\r\n\r\n// ✅ Helper Function for API Requests\r\nconst apiRequest = async (method, endpoint, data = null) => {\r\n  try {\r\n    const response = await axios({\r\n      method,\r\n      url: `${BASE_URL}${endpoint}`,\r\n      data,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      `❌ API Error [${method.toUpperCase()} ${endpoint}]:`,\r\n      error.response?.data || error\r\n    );\r\n    return { error: error.response?.data || \"Request failed\" };\r\n  }\r\n};\r\n\r\n// ✅ Fetch Active Ride\r\nexport const fetchActiveRide = (userId) =>\r\n  apiRequest(\"get\", `/tracking/ride-status/${userId}`);\r\n\r\n// ✅ Book a Ride & Notify Drivers\r\nexport const bookRide = async (\r\n  userId,\r\n  fromLocation,\r\n  toLocation,\r\n  vehicleType,\r\n  rideType\r\n) => {\r\n  if (!userId || isNaN(userId)) return { error: \"Invalid User ID\" };\r\n\r\n  const response = await apiRequest(\"post\", \"/bookings/book-ride\", {\r\n    userId,\r\n    fromLocation,\r\n    toLocation,\r\n    vehicleType,\r\n  });\r\n  if (response?.rideId) socket.emit(\"newRideRequest\", response);\r\n  return response;\r\n};\r\n\r\n// ✅ Accept a Ride & Notify Requester\r\nexport const acceptRide = async (driverId, rideId) => {\r\n  if (!driverId || !rideId) return { error: \"Invalid parameters\" };\r\n\r\n  const response = await apiRequest(\"post\", \"/tracking/accept-ride\", {\r\n    driverId,\r\n    rideId,\r\n  });\r\n  if (response.success) socket.emit(\"acceptRide\", { driverId, rideId });\r\n  return response;\r\n};\r\n\r\n// ✅ Start a Ride\r\nexport const startRide = (rideId) =>\r\n  apiRequest(\"post\", \"/tracking/start-ride\", { rideId });\r\n\r\n// ✅ Mark Material Pick Time\r\nexport const markPickTime = (rideId) =>\r\n  apiRequest(\"post\", \"/tracking/mark-pick-time\", { rideId });\r\n\r\n// ✅ Complete a Ride\r\nexport const completeRide = async (rideId) => {\r\n  try {\r\n    const response = await apiRequest(\"post\", \"/tracking/complete-ride\", { rideId });\r\n    \r\n    if (response.success) {\r\n      socket.emit(\"rideCompleted\", { \r\n        rideId,\r\n        driverId: response.driverId || \"unknown\" \r\n      });\r\n    }\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error completing ride:\", error);\r\n    return { error: \"Failed to complete ride\" };\r\n  }\r\n};\r\n\r\n// ✅ Fetch Maintenance Requests\r\nexport const fetchMaintenanceRequests = () =>\r\n  apiRequest(\"get\", \"/maintenance/issues\");\r\n\r\n// ✅ Report Maintenance Issue\r\nexport const reportMaintenance = (forkliftId, issue) =>\r\n  apiRequest(\"post\", \"/maintenance/report-maintenance\", { forkliftId, issue });\r\n\r\n// ✅ Resolve Maintenance Issue\r\nexport const resolveMaintenance = (requestId) =>\r\n  apiRequest(\"post\", \"/maintenance/resolve-maintenance\", { requestId });\r\n\r\n// ✅ Fetch Ride Reports\r\nexport const fetchRideReports = () => apiRequest(\"get\", \"/reports/rides\");\r\n\r\n// ✅ Mark Driver as HOME\r\nexport const markHome = (driverId) =>\r\n  apiRequest(\"post\", \"/drivers/mark-home\", { driverId });\r\n\r\n// ✅ WebSocket Event Listeners\r\nsocket.on(\"newRideRequest\", (rideData) =>\r\n  console.log(\"📌 New ride request:\", rideData)\r\n);\r\nsocket.on(\"rideAccepted\", ({ rideId, driverId }) =>\r\n  console.log(`✅ Ride ${rideId} accepted by Driver ${driverId}`)\r\n);\r\nsocket.on(\"driverStatusUpdated\", ({ driverId, status }) =>\r\n  console.log(`🔄 Driver ${driverId} is now ${status}`)\r\n);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,QAAQ,GAAG,6BAA6B;AAC9C,MAAMC,UAAU,GAAG,yBAAyB;;AAE5C;AACA,MAAMC,MAAM,GAAGH,EAAE,CAACE,UAAU,EAAE;EAC5BE,oBAAoB,EAAE,CAAC;EAAE;EACzBC,OAAO,EAAE,IAAI,CAAE;AACjB,CAAC,CAAC;;AAEF;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAC;MAC3BQ,MAAM;MACNI,GAAG,EAAE,GAAGV,QAAQ,GAAGO,QAAQ,EAAE;MAC7BC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACdC,OAAO,CAACH,KAAK,CACX,gBAAgBL,MAAM,CAACS,WAAW,CAAC,CAAC,IAAIR,QAAQ,IAAI,EACpD,EAAAK,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBJ,IAAI,KAAIG,KAC1B,CAAC;IACD,OAAO;MAAEA,KAAK,EAAE,EAAAE,gBAAA,GAAAF,KAAK,CAACF,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAI;IAAiB,CAAC;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,eAAe,GAAIC,MAAM,IACpCZ,UAAU,CAAC,KAAK,EAAE,yBAAyBY,MAAM,EAAE,CAAC;;AAEtD;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CACtBD,MAAM,EACNE,YAAY,EACZC,UAAU,EACVC,WAAW,EACXC,QAAQ,KACL;EACH,IAAI,CAACL,MAAM,IAAIM,KAAK,CAACN,MAAM,CAAC,EAAE,OAAO;IAAEN,KAAK,EAAE;EAAkB,CAAC;EAEjE,MAAMF,QAAQ,GAAG,MAAMJ,UAAU,CAAC,MAAM,EAAE,qBAAqB,EAAE;IAC/DY,MAAM;IACNE,YAAY;IACZC,UAAU;IACVC;EACF,CAAC,CAAC;EACF,IAAIZ,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEe,MAAM,EAAEtB,MAAM,CAACuB,IAAI,CAAC,gBAAgB,EAAEhB,QAAQ,CAAC;EAC7D,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMiB,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEH,MAAM,KAAK;EACpD,IAAI,CAACG,QAAQ,IAAI,CAACH,MAAM,EAAE,OAAO;IAAEb,KAAK,EAAE;EAAqB,CAAC;EAEhE,MAAMF,QAAQ,GAAG,MAAMJ,UAAU,CAAC,MAAM,EAAE,uBAAuB,EAAE;IACjEsB,QAAQ;IACRH;EACF,CAAC,CAAC;EACF,IAAIf,QAAQ,CAACmB,OAAO,EAAE1B,MAAM,CAACuB,IAAI,CAAC,YAAY,EAAE;IAAEE,QAAQ;IAAEH;EAAO,CAAC,CAAC;EACrE,OAAOf,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMoB,SAAS,GAAIL,MAAM,IAC9BnB,UAAU,CAAC,MAAM,EAAE,sBAAsB,EAAE;EAAEmB;AAAO,CAAC,CAAC;;AAExD;AACA,OAAO,MAAMM,YAAY,GAAIN,MAAM,IACjCnB,UAAU,CAAC,MAAM,EAAE,0BAA0B,EAAE;EAAEmB;AAAO,CAAC,CAAC;;AAE5D;AACA,OAAO,MAAMO,YAAY,GAAG,MAAOP,MAAM,IAAK;EAC5C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMJ,UAAU,CAAC,MAAM,EAAE,yBAAyB,EAAE;MAAEmB;IAAO,CAAC,CAAC;IAEhF,IAAIf,QAAQ,CAACmB,OAAO,EAAE;MACpB1B,MAAM,CAACuB,IAAI,CAAC,eAAe,EAAE;QAC3BD,MAAM;QACNG,QAAQ,EAAElB,QAAQ,CAACkB,QAAQ,IAAI;MACjC,CAAC,CAAC;IACJ;IAEA,OAAOlB,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MAAEA,KAAK,EAAE;IAA0B,CAAC;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,wBAAwB,GAAGA,CAAA,KACtC3B,UAAU,CAAC,KAAK,EAAE,qBAAqB,CAAC;;AAE1C;AACA,OAAO,MAAM4B,iBAAiB,GAAGA,CAACC,UAAU,EAAEC,KAAK,KACjD9B,UAAU,CAAC,MAAM,EAAE,iCAAiC,EAAE;EAAE6B,UAAU;EAAEC;AAAM,CAAC,CAAC;;AAE9E;AACA,OAAO,MAAMC,kBAAkB,GAAIC,SAAS,IAC1ChC,UAAU,CAAC,MAAM,EAAE,kCAAkC,EAAE;EAAEgC;AAAU,CAAC,CAAC;;AAEvE;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAMjC,UAAU,CAAC,KAAK,EAAE,gBAAgB,CAAC;;AAEzE;AACA,OAAO,MAAMkC,QAAQ,GAAIZ,QAAQ,IAC/BtB,UAAU,CAAC,MAAM,EAAE,oBAAoB,EAAE;EAAEsB;AAAS,CAAC,CAAC;;AAExD;AACAzB,MAAM,CAACsC,EAAE,CAAC,gBAAgB,EAAGC,QAAQ,IACnC3B,OAAO,CAAC4B,GAAG,CAAC,sBAAsB,EAAED,QAAQ,CAC9C,CAAC;AACDvC,MAAM,CAACsC,EAAE,CAAC,cAAc,EAAE,CAAC;EAAEhB,MAAM;EAAEG;AAAS,CAAC,KAC7Cb,OAAO,CAAC4B,GAAG,CAAC,UAAUlB,MAAM,uBAAuBG,QAAQ,EAAE,CAC/D,CAAC;AACDzB,MAAM,CAACsC,EAAE,CAAC,qBAAqB,EAAE,CAAC;EAAEb,QAAQ;EAAEgB;AAAO,CAAC,KACpD7B,OAAO,CAAC4B,GAAG,CAAC,aAAaf,QAAQ,WAAWgB,MAAM,EAAE,CACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}