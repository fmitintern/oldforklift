{"ast":null,"code":"import axios from \"axios\";\nimport { io } from \"socket.io-client\";\nconst BASE_URL = \"http://144.11.1.83:5000/api\";\nconst SOCKET_URL = \"http://144.11.1.83:5000\";\n\n// Initialize WebSocket\nconst socket = io(SOCKET_URL, {\n  reconnectionAttempts: 5,\n  timeout: 5000\n});\n\n// Generic API Request\nconst apiRequest = async (method, endpoint, data = null) => {\n  try {\n    const response = await axios({\n      method,\n      url: `${BASE_URL}${endpoint}`,\n      data\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(`❌ API Error [${method.toUpperCase()} ${endpoint}]:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    return {\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || \"Request failed\"\n    };\n  }\n};\n\n// API Exports\nexport const fetchActiveRide = userId => apiRequest(\"get\", `/tracking/ride-status/${userId}`);\nexport const bookRide = async (userId, fromLocation, toLocation, vehicleType, rideType) => {\n  if (!userId || isNaN(userId)) return {\n    error: \"Invalid User ID\"\n  };\n  const response = await apiRequest(\"post\", \"/rides/book-ride\", {\n    userId,\n    fromLocation,\n    toLocation,\n    vehicleType\n  });\n  if (response !== null && response !== void 0 && response.rideId) {\n    socket.emit(\"newRideRequest\", {\n      rideId: response.rideId\n    });\n  }\n  return response;\n};\nexport const acceptRide = async (driverId, rideId) => {\n  if (!driverId || !rideId) return {\n    error: \"Invalid parameters\"\n  };\n  const response = await apiRequest(\"post\", \"/tracking/accept-ride\", {\n    driverId,\n    rideId\n  });\n  if (response.success) {\n    socket.emit(\"acceptRide\", {\n      rideId,\n      driverId\n    });\n  }\n  return response;\n};\nexport const startRide = rideId => apiRequest(\"post\", \"/tracking/start-ride\", {\n  rideId\n});\nexport const markPickTime = rideId => apiRequest(\"post\", \"/tracking/mark-pick-time\", {\n  rideId\n});\nexport const completeRide = async rideId => {\n  console.log(\"📡 Completing ride:\", rideId);\n  const response = await apiRequest(\"post\", \"/tracking/complete-ride\", {\n    rideId\n  });\n  if (response.success) {\n    var _response$ride, _response$ride2;\n    socket.emit(\"rideCompleted\", {\n      rideId,\n      driverId: ((_response$ride = response.ride) === null || _response$ride === void 0 ? void 0 : _response$ride.driverId) || \"unknown\",\n      endTime: (_response$ride2 = response.ride) === null || _response$ride2 === void 0 ? void 0 : _response$ride2.completedAt\n    });\n    console.log(\"✅ Ride completion successful\");\n  } else {\n    console.error(\"❌ Completion failed:\", response.error);\n  }\n  return response;\n};\nexport const fetchMaintenanceRequests = () => apiRequest(\"get\", \"/maintenance/issues\");\nexport const reportMaintenance = (forkliftId, issue) => apiRequest(\"post\", \"/maintenance/report-maintenance\", {\n  forkliftId,\n  issue\n});\nexport const resolveMaintenance = requestId => apiRequest(\"post\", \"/maintenance/resolve-maintenance\", {\n  requestId\n});\nexport const fetchRideReports = () => apiRequest(\"get\", \"/reports/rides\");\nexport const markHome = driverId => apiRequest(\"post\", \"/drivers/mark-home\", {\n  driverId\n});\n\n// WebSocket Listeners\nsocket.on(\"newRideRequest\", rideData => console.log(\"📌 New ride request received:\", rideData));\nsocket.on(\"rideAccepted\", ({\n  rideId,\n  driverId\n}) => console.log(`✅ Ride ${rideId} accepted by Driver ${driverId}`));\nsocket.on(\"rideCompleted\", ({\n  rideId,\n  driverId,\n  endTime\n}) => console.log(`🏁 Ride ${rideId} completed by Driver ${driverId} at ${endTime}`));\nsocket.on(\"driverStatusUpdated\", ({\n  driverId,\n  status\n}) => console.log(`🔄 Driver ${driverId} status updated to ${status}`));","map":{"version":3,"names":["axios","io","BASE_URL","SOCKET_URL","socket","reconnectionAttempts","timeout","apiRequest","method","endpoint","data","response","url","error","_error$response","_error$response2","console","toUpperCase","fetchActiveRide","userId","bookRide","fromLocation","toLocation","vehicleType","rideType","isNaN","rideId","emit","acceptRide","driverId","success","startRide","markPickTime","completeRide","log","_response$ride","_response$ride2","ride","endTime","completedAt","fetchMaintenanceRequests","reportMaintenance","forkliftId","issue","resolveMaintenance","requestId","fetchRideReports","markHome","on","rideData","status"],"sources":["C:/Users/ksrvisitor/forklift/Frontend/src/Services/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst BASE_URL = \"http://144.11.1.83:5000/api\";\r\nconst SOCKET_URL = \"http://144.11.1.83:5000\";\r\n\r\n// Initialize WebSocket\r\nconst socket = io(SOCKET_URL, {\r\n  reconnectionAttempts: 5,\r\n  timeout: 5000,\r\n});\r\n\r\n// Generic API Request\r\nconst apiRequest = async (method, endpoint, data = null) => {\r\n  try {\r\n    const response = await axios({\r\n      method,\r\n      url: `${BASE_URL}${endpoint}`,\r\n      data,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`❌ API Error [${method.toUpperCase()} ${endpoint}]:`, error.response?.data || error);\r\n    return { error: error.response?.data || \"Request failed\" };\r\n  }\r\n};\r\n\r\n// API Exports\r\nexport const fetchActiveRide = (userId) =>\r\n  apiRequest(\"get\", `/tracking/ride-status/${userId}`);\r\n\r\nexport const bookRide = async (userId, fromLocation, toLocation, vehicleType, rideType) => {\r\n  if (!userId || isNaN(userId)) return { error: \"Invalid User ID\" };\r\n\r\n  const response = await apiRequest(\"post\", \"/rides/book-ride\", {\r\n    userId,\r\n    fromLocation,\r\n    toLocation,\r\n    vehicleType,\r\n  });\r\n\r\n  if (response?.rideId) {\r\n    socket.emit(\"newRideRequest\", { rideId: response.rideId });\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport const acceptRide = async (driverId, rideId) => {\r\n  if (!driverId || !rideId) return { error: \"Invalid parameters\" };\r\n\r\n  const response = await apiRequest(\"post\", \"/tracking/accept-ride\", {\r\n    driverId,\r\n    rideId,\r\n  });\r\n\r\n  if (response.success) {\r\n    socket.emit(\"acceptRide\", { rideId, driverId });\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport const startRide = (rideId) =>\r\n  apiRequest(\"post\", \"/tracking/start-ride\", { rideId });\r\n\r\nexport const markPickTime = (rideId) =>\r\n  apiRequest(\"post\", \"/tracking/mark-pick-time\", { rideId });\r\n\r\nexport const completeRide = async (rideId) => {\r\n  console.log(\"📡 Completing ride:\", rideId);\r\n  const response = await apiRequest(\"post\", \"/tracking/complete-ride\", { rideId });\r\n\r\n  if (response.success) {\r\n    socket.emit(\"rideCompleted\", {\r\n      rideId,\r\n      driverId: response.ride?.driverId || \"unknown\",\r\n      endTime: response.ride?.completedAt,\r\n    });\r\n    console.log(\"✅ Ride completion successful\");\r\n  } else {\r\n    console.error(\"❌ Completion failed:\", response.error);\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport const fetchMaintenanceRequests = () =>\r\n  apiRequest(\"get\", \"/maintenance/issues\");\r\n\r\nexport const reportMaintenance = (forkliftId, issue) =>\r\n  apiRequest(\"post\", \"/maintenance/report-maintenance\", { forkliftId, issue });\r\n\r\nexport const resolveMaintenance = (requestId) =>\r\n  apiRequest(\"post\", \"/maintenance/resolve-maintenance\", { requestId });\r\n\r\nexport const fetchRideReports = () =>\r\n  apiRequest(\"get\", \"/reports/rides\");\r\n\r\nexport const markHome = (driverId) =>\r\n  apiRequest(\"post\", \"/drivers/mark-home\", { driverId });\r\n\r\n// WebSocket Listeners\r\nsocket.on(\"newRideRequest\", (rideData) =>\r\n  console.log(\"📌 New ride request received:\", rideData)\r\n);\r\n\r\nsocket.on(\"rideAccepted\", ({ rideId, driverId }) =>\r\n  console.log(`✅ Ride ${rideId} accepted by Driver ${driverId}`)\r\n);\r\n\r\nsocket.on(\"rideCompleted\", ({ rideId, driverId, endTime }) =>\r\n  console.log(`🏁 Ride ${rideId} completed by Driver ${driverId} at ${endTime}`)\r\n);\r\n\r\nsocket.on(\"driverStatusUpdated\", ({ driverId, status }) =>\r\n  console.log(`🔄 Driver ${driverId} status updated to ${status}`)\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}